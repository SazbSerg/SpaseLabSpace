Map - это структура данных, в которой объекты хранятся не по одному, как во всех остальных,
а в паре "ключ - значение".

Коллекция Map хранит элементы в виде пар ключ-значение. При доступе к значению можно получить доступ только
в соответствии с ключом каждого элемента.

Cреди основных реализаций можно назвать:
- HashMap
- LinkedHashMap
- TreeMap
- Hashtable
- WeakHashMap

HashMap - хранит значения в произвольном порядке, но позволяет быстро искать элементы карты.
Позволяет задавать ключ или значение ключевым словом null.
(HashMap — коллекция является альтернативой Hashtable. Двумя основными отличиями от Hashtable являются то,
что HashMap не синхронизирована и HashMap позволяет использовать null как в качестве ключа, так и значения.
Так же как и Hashtable, данная коллекция не является упорядоченной: порядок хранения элементов зависит от хэш-функции.
Добавление элемента выполняется за константное время O(1), но время удаления, получения зависит от распределения
хэш-функции. В идеале является константным, но может быть и линейным O(n).)

LinkedHashMap - хранит значения в порядке добавления.
(LinkedHashMap — это упорядоченная реализация хэш-таблицы. Здесь, в отличии от HashMap, порядок итерирования равен
порядку добавления элементов. Данная особенность достигается благодаря двунаправленным связям между элементами
(аналогично LinkedList). Но это преимущество имеет также и недостаток — увеличение памяти, которое занимет коллекция.)

TreeMap - сама сортирует значения по заданному критерию. TreeMap используется либо с Comparable элементами,
либо в связке с Comparator.
(TreeMap — реализация Map основанная на красно-чёрных деревьях. Как и LinkedHashMap является упорядоченной.
По-умолчанию, коллекция сортируется по ключам с использованием принципа "natural ordering", но это поведение может
быть настроено под конкретную задачу при помощи объекта Comparator, который указывается в качестве параметра
при создании объекта TreeMap.)

Hashtable - как HashMap, только не позволяет хранить null и синхронизирован с точки зрения многопоточности -
это значит, что много потоков могут работать безопасно с Hashtable. Но данная реализация старая и медленная,
поэтому сейчас уже не используется в новых проектах.
(Hashtable — реализация такой структуры данных, как хэш-таблица. Она не позволяет использовать null в качестве
значения или ключа. Эта коллекция была реализована раньше, чем Java Collection Framework, но в последствии была
включена в его состав. Как и другие коллекции из Java 1.0, Hashtable является синхронизированной
(почти все методы помечены как synchronized). Из-за этой особенности у неё имеются существенные проблемы
с производительностью и, начиная с Java 1.2, в большинстве случаев рекомендуется использовать другие реализации
интерфейса Map ввиду отсутствия у них синхронизации.)

Класс WeakHashMap является реализацией интерфейса Map, который хранит только слабые ссылки в качестве ключей.
Это позволяет сборщику мусора удалять элемент структуры в том случае, если на ключ элемента типа “ключ – значение”
за пределами таблицы никто не ссылается.
(WeakHashMap — реализация хэш-таблицы, которая организована с использованием weak references.
Другими словами, Garbage Collector автоматически удалит элемент из коллекции при следующей сборке мусора,
если на ключ этого элеметна нет жёстких ссылок.)

Операции с Map:
1. put(K key, V value) - добавляет элемент в карту;
2. get(Object key) - ищет значение по его ключу;
3. remove(Object key) - удаляет значение по его ключу;
4. containsKey(Object key) - спрашивает, есть ли в карте заданный ключ;
5. containsValue(Object value) - спрашивает есть ли в карте заданное значение;
6. size() - возвращает размер карты (количество пар "ключ-значение").