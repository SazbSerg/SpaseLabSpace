С английского "Comparable" переводится как "сравнимый". Имплементируя этот интерфейс мы как бы говорим
"Эй, теперь объекты этого класса можно сравнивать между собой! И я знаю, как это сделать!" А до этого было нельзя
Так как выглядит интерфейс Comparable? Очень просто - в нем находится всего один метод:

public interface Comparable<T> {
    public int compareTo(T o);

Если мы реализуем этот интерфейс нам придется определить только один метод - compareTo(T o).
С английского "compareTo" переводится как "сравнить с". Именно этот метод буде использоваться во всяких сортировках.

Метод compareTo(T o) возвращает int. Он возвращает:

- ноль, если два объекта равны;
- число >0, если первый объект (на котором вызывается метод) больше, чем второй (который передается в качестве параметра);
- число <0, если первый объект меньше второго.

Алгоритм работы с Comparable:
- имплементация интерфейса Comparable<тут указан класс, который будем сортировать>
- переопределяем метод compareTo(), в нём задаём правило сортировки и возвращаем "0", если объекты равны; "-1", если
первый объект меньше второго; "1", если второй объект больше первого.

метод compareTo(T o), который требует реализовать интерфейс Comparable, часто называют "естественным сравнением"
("natural comparison method") - т.е. методом по умолчанию.
Основные типы (например, Integer, String, Float) уже имеют свои методы compareTo(T o).

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Если Вам нужен "нестандартный" вид сортировки - следует использовать Comparator.
Для этой цели мы можем создать отдельный класс, который реализует интерфейс Comparator.
Например, у нас уже есть класс Хххх. Давайте создадим отдельный класс, которые будут выполнять функцию
сравнения - КритерийComparator.
Переопределяем метод comprare(Xxxx x1, Xxxx x2) {то же самое, условие и 0, -1, 1}
Обратите внимение: мы указываем тип объектов, которые хотим сравнивать (Хххх) в скобках <> после слова "Comparator".
Создадим объект класса КритерийComparator, а потом вызовем у нашего, например, ArrayList метод sort(),
который принимает на вход как раз объект класса, реализующего интерфейс Comparator, в нашем  КритерийComparator, и
отсортируем наш ArrayList.




