Список, в классическом смысле - это тип данных, в котором каждый элемент содержит какой-то контент
(например, String, Integer или вообще какой-нибудь объект), а также ссылку на следующий элемент списка.

Основное преимущество списка по сравнению с массивом - его можно легко расширять.
Если у нас есть массив на 3 элемента, а нам вдруг понадобилось положить туда 10 элементов, нам просто придется
создавать новый массив на 10 элементов. Только так и никак иначе!
Но со списками все по-другому. Мы можем свободно добавлять элементы в начало, середину или конец списка.
Все потому, что для массива нам нужен один "сплошной" участок памяти, и чтобы его расширить,
придется искать другой "целый" кусок памяти. Но с List проще - мы просто меняем ссылки.

LinkedList лучше использовать, если Вы знаете, что будете часто добавлять и удалять элементы из списка.
ArrayList лучше использовать, если Вам главное иметь быстрый доступ к элементам списка.
ArrayList - это список на основе массива. LinkedList - связанный список на основе элементов и связи между ними.
В качестве LinkedList лучше всего подходит представление вагонов поезда сцепленных последовательно.
ArrayList следует использовать, когда в приоритете доступ по индексу, так как эти операции выполняются за константное
время. Добавление в конец списка в среднем тоже выполняется за константное время. Кроме того в ArrayList нет
дополнительных расходов на хранение связки между элементами. Минусы в скорости вставки/удаления элементов находящихся
не в конце списка, так как при этой операции все элементы правее добавляемого/удаляемого сдвигаются.
LinkedList удобен когда важнее быстродействие операций вставки/удаления, которые в LinkedList выполняются
за константное время. Операции доступа по индексу производятся перебором с начала или конца (смотря что ближе)
до нужного элемента. Дополнительные затраты на хранение связки между элементами.

Одним словом - если часто вставляете/удаляете - выбирайте в пользу LinkedList, в противном случае ArrayList.

ArrayList основан на обычном массиве. Данная коллекция динамически увеличивает размер массива, если в нем не
хватает места, при вызове методов add(T element), addAll(Collection<T> other) Так же она может его уменьшать,
если размер больше количества хранимых элементов, методом trimToSize()

LinkedList это обычный связанный список, состоящий из узлов. В каждом узле, хранится ссылки на следующий/предыдующий
узел и значение. В самом списке, есть ссылки на последний и первый узел, а так же размер.

В отличие от новых реализаций коллекции, Vector - synchronized. Если потокобезопасная реализация не требуется,
рекомендуется использовать ArrayList вместо Vector.
Рекомендуется использовать класс Vector только в поточно-ориентированной реализации. Если вам не нужно использовать
потокобезопасную реализацию, вы должны использовать ArrayList, в этом случае ArrayList будет работать лучше.
Итераторы, возвращаемые классом Vector, работают без сбоев . В случае одновременной модификации происходит сбой и
возникает исключение ConcurrentModificationException.


Некоторые наиболее часто используемые методы интерфейса List:

- void add(int index, E obj): добавляет в список по индексу index объект obj
- boolean addAll(int index, Collection<? extends E> col): добавляет в список по индексу index все элементы коллекции col.
Если в результате добавления список был изменен, то возвращается true, иначе возвращается false
- E get(int index): возвращает объект из списка по индексу index
- int indexOf(Object obj): возвращает индекс первого вхождения объекта obj в список. Если объект не найден,
то возвращается -1
- int lastIndexOf(Object obj): возвращает индекс последнего вхождения объекта obj в список. Если объект не найден,
то возвращается -1
- ListIterator<E> listIterator (): возвращает объект ListIterator для обхода элементов списка
- static <E> List<E> of(элементы): создает из набора элементов объект List
- E remove(int index): удаляет объект из списка по индексу index, возвращая при этом удаленный объект
- E set(int index, E obj): присваивает значение объекта obj элементу, который находится по индексу index
- void sort(Comparator<? super E> comp): сортирует список с помощью компаратора comp
- List<E> subList(int start, int end): получает набор элементов, которые находятся в списке между индексами start и end.

LinkedList содержит все те методы, которые определены в интерфейсах List, Queue, Deque. Некоторые из них:
- addFirst() / offerFirst(): добавляет элемент в начало списка
- addLast() / offerLast(): добавляет элемент в конец списка
- removeFirst() / pollFirst(): удаляет первый элемент из начала списка
- removeLast() / pollLast(): удаляет последний элемент из конца списка
- getFirst() / peekFirst(): получает первый элемент
- getLast() / peekLast(): получает последний элемент